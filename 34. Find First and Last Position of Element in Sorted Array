class Solution {
    public int[] searchRange(int[] nums, int target) {
        int [] ans=  new int [2];
      int left=findLeft(nums,target);
      if(left==-1){
        ans [0]=-1;
        ans[1]=-1;
        return ans;
      }else{
        int right=findRight(nums,target);
        ans [0]=left;
        ans[1]=right;
      }
      return ans;
    }
    private int findLeft(int [] arr, int target){
        int start=0;
       int n=arr.length-1;
       int end=n;

       int left=-1;
        while(start<=end){
            int mid=(start+end)/2;

            if(arr[mid]==target){
                left=mid;
                end=mid-1;
            }else if (arr[mid]<target){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return left;
    }
     private int findRight(int [] arr, int target){
        int start=0;
       int n=arr.length-1;
       int end=n;

       int right=-1;
        while(start<=end){
            int mid=(start+end)/2;

            if(arr[mid]==target){
                right=mid;
                start=mid+1;
            }else if (arr[mid]<target){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return right;
    }

}
